import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route, useNavigate, useLocation } from 'react-router-dom';
import { api } from './api';
import LoginForm from './components/LoginForm';
import UserList from './components/UserList';

  
  // Funcion para resetear el formulario
  const resetForm = () => {
    setFormData({
      Id_usuario: '',
      primer_nombre: '',
      segundo_nombre: '',
      primer_apellido: '',
      segundo_apellido: '',
      Id_rol: 'USUARIO',
      correo: '',
      contrasena: ''
    });
  };

  // Funcion para iniciar el modo de edicion
  const handleEditUser = (userData) => {
    setEditingUserId(userData.Id_usuario);
    setFormData({
      Id_usuario: userData.Id_usuario,
      primer_nombre: userData.primer_nombre,
      segundo_nombre: userData.segundo_nombre,
      primer_apellido: userData.primer_apellido,
      segundo_apellido: userData.segundo_apellido,
      Id_rol: userData.Id_rol,
      correo: userData.correo,
      contrasena: '' // La contrasena no se precarga por seguridad
    });
  };

  // Funcion para eliminar un usuario
  const handleDeleteUser = async (userId) => {
    setMessage('');
    try {
      await api.delete(`/usuarios/${userId}`);
      setMessage('Usuario eliminado exitosamente.');
      fetchUsers();
    } catch (err) {
      if (err.response && err.response.data) {
        setMessage(err.response.data.message);
      } else {
        setMessage('Error al eliminar el usuario.');
      }
      console.error(err);
    }
  };

  return (
    <div className="container mx-auto p-8 bg-gray-50 min-h-screen">
      <div className="bg-white p-8 rounded-xl shadow-lg mb-8">
        <h2 className="text-3xl font-bold text-gray-800 mb-6">{editingUserId ? 'Editar Usuario' : 'Crear Nuevo Usuario'}</h2>
        {message && (
          <div className={`p-4 mb-4 rounded-xl text-white ${message.includes('exitosamente') ? 'bg-green-500' : 'bg-red-500'}`}>
            {message}
          </div>
        )}
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-gray-700 text-sm font-bold mb-2">Id Usuario:</label>
              <input
                className="shadow-inner appearance-none border rounded-xl w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                type="number"
                name="Id_usuario"
                value={formData.Id_usuario}
                onChange={handleInputChange}
                required
              />
            </div>
            <div>
              <label className="block text-gray-700 text-sm font-bold mb-2">Primer Nombre:</label>
              <input
                className="shadow-inner appearance-none border rounded-xl w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                type="text"
                name="primer_nombre"
                value={formData.primer_nombre}
                onChange={handleInputChange}
                required
              />
            </div>
            <div>
              <label className="block text-gray-700 text-sm font-bold mb-2">Segundo Nombre:</label>
              <input
                className="shadow-inner appearance-none border rounded-xl w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                type="text"
                name="segundo_nombre"
                value={formData.segundo_nombre}
                onChange={handleInputChange}
              />
            </div>
            <div>
              <label className="block text-gray-700 text-sm font-bold mb-2">Primer Apellido:</label>
              <input
                className="shadow-inner appearance-none border rounded-xl w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                type="text"
                name="primer_apellido"
                value={formData.primer_apellido}
                onChange={handleInputChange}
                required
              />
            </div>
            <div>
              <label className="block text-gray-700 text-sm font-bold mb-2">Segundo Apellido:</label>
              <input
                className="shadow-inner appearance-none border rounded-xl w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                type="text"
                name="segundo_apellido"
                value={formData.segundo_apellido}
                onChange={handleInputChange}
              />
            </div>
            <div>
              <label className="block text-gray-700 text-sm font-bold mb-2">Rol:</label>
              <select
                className="shadow-inner appearance-none border rounded-xl w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                name="Id_rol"
                value={formData.Id_rol}
                onChange={handleInputChange}
              >
                <option value="">Seleccione un rol</option>
                <option value="adm05">ADMINISTRADOR</option>
                <option value="aux01">AUXILIAR</option>
                <option value="enf02">ENFERMERO</option>
                <option value="med03">MÃ‰DICO</option>
                <option value="ter04">TERAPIA</option>
              </select>
            </div>
            <div>
              <label className="block text-gray-700 text-sm font-bold mb-2">Correo:</label>
              <input
                className="shadow-inner appearance-none border rounded-xl w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                type="email"
                name="correo"
                value={formData.correo}
                onChange={handleInputChange}
                required
              />
            </div>
            <div>
              <label className="block text-gray-700 text-sm font-bold mb-2">Contrasena:</label>
              <input
                className="shadow-inner appearance-none border rounded-xl w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                type="password"
                name="contrasena"
                value={formData.contrasena}
                onChange={handleInputChange}
                required={!editingUserId}
              />
            </div>
          </div>
          <div className="flex justify-end space-x-4 mt-4">
            <button
              className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-xl focus:outline-none focus:shadow-outline transition-colors"
              type="submit"
            >
              {editingUserId ? 'Actualizar' : 'Crear'} Usuario
            </button>
            {editingUserId && (
              <button
                className="bg-gray-400 hover:bg-gray-500 text-white font-bold py-2 px-4 rounded-xl focus:outline-none focus:shadow-outline transition-colors"
                type="button"
                onClick={() => {
                  setEditingUserId(null);
                  resetForm();
                }}
              >
                Cancelar
              </button>
            )}
          </div>
        </form>
      </div>

      <div className="mt-12">
        <h2 className="text-3xl font-bold text-gray-800 mb-6">Lista de Usuarios</h2>
        <div className="bg-white p-8 rounded-xl shadow-lg overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Id Usuario</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nombre</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Apellido</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Rol</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Correo</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Acciones</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {users.map((u) => (
                <tr key={u.Id_usuario}>
                  <td className="px-6 py-4 whitespace-nowrap">{u.Id_usuario}</td>
                  <td className="px-6 py-4 whitespace-nowrap">{u.primer_nombre} {u.segundo_nombre}</td>
                  <td className="px-6 py-4 whitespace-nowrap">{u.primer_apellido} {u.segundo_apellido}</td>
                  <td className="px-6 py-4 whitespace-nowrap">{u.Id_rol}</td>
                  <td className="px-6 py-4 whitespace-nowrap">{u.correo}</td>
                  <td className="px-6 py-4 whitespace-nowrap space-x-2">
                    <button
                      onClick={() => handleEditUser(u)}
                      className="bg-yellow-500 hover:bg-yellow-600 text-white font-bold py-1 px-3 rounded-full transition-colors"
                    >
                      Editar
                    </button>
                    <button
                      onClick={() => handleDeleteUser(u.Id_usuario)}
                      className="bg-red-500 hover:bg-red-600 text-white font-bold py-1 px-3 rounded-full transition-colors"
                    >
                      Eliminar
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
};

// Componente del dashboard (pagina principal despues del login)
const Dashboard = ({ user, onLogout }) => {
  const [activeTab, setActiveTab] = useState('home'); // Estado para controlar la pestana activa

  const renderContent = () => {
    switch (activeTab) {
      case 'home':
        return (
          <div className="bg-white p-8 rounded-xl shadow-lg mb-8">
            <h2 className="text-3xl font-medium text-gray-800 mb-4">Bienvenido, {user?.primerNombre}</h2>
            <p className="text-lg text-gray-600">Este es tu panel de control de administrador.</p>
          </div>
        );
      case 'users':
        return <UserManagement />;
      case 'turns':
        return (
          <div className="bg-white p-8 rounded-xl shadow-lg mb-8">
            <h2 className="text-3xl font-bold text-gray-800">Gestion de Turnos</h2>
            <p className="text-lg text-gray-600 mt-4">Aqui podras gestionar los turnos.</p>
          </div>
        );
      case 'news':
        return (
          <div className="bg-white p-8 rounded-xl shadow-lg mb-8">
            <h2 className="text-3xl font-bold text-gray-800">Gestion de Novedades</h2>
            <p className="text-lg text-gray-600 mt-4">Proximamente se implementara la gestion de novedades.</p>
          </div>
        );
      case 'other':
        return (
          <div className="bg-white p-8 rounded-xl shadow-lg mb-8">
            <h2 className="text-3xl font-bold text-gray-800">Otros Modulos</h2>
            <p className="text-lg text-gray-600 mt-4">Proximamente podras ver mas modulos aqui.</p>
          </div>
        );
      default:
        return null;
    }
  };

  return (
    <div className="flex h-screen bg-gray-100">
      {/* Sidebar de navegacion */}
      <aside className="w-64 bg-gray-800 text-white flex flex-col p-6 rounded-r-3xl shadow-xl">
        <div className="flex-shrink-0 flex items-center mb-8">
          <img src="https://i.ibb.co/L5hYh8C/logo.png" alt="Logo" className="w-12 h-12 mr-3"/>
          <h2 className="text-2xl font-bold">SGTurnos</h2>
        </div>
        <nav className="flex-grow">
          <ul>
            <li>
              <button
                onClick={() => setActiveTab('home')}
                className={`w-full text-left py-3 px-4 rounded-xl font-semibold transition-colors duration-200 mb-2 ${activeTab === 'home' ? 'bg-blue-600 text-white shadow-md' : 'hover:bg-gray-700'}`}
              >
                Inicio
              </button>
            </li>
            <li>
              <button
                onClick={() => setActiveTab('users')}
                className={`w-full text-left py-3 px-4 rounded-xl font-semibold transition-colors duration-200 mb-2 ${activeTab === 'users' ? 'bg-blue-600 text-white shadow-md' : 'hover:bg-gray-700'}`}
              >
                Gestion de Usuarios
              </button>
            </li>
            <li>
              <button
                onClick={() => setActiveTab('turns')}
                className={`w-full text-left py-3 px-4 rounded-xl font-semibold transition-colors duration-200 mb-2 ${activeTab === 'turns' ? 'bg-blue-600 text-white shadow-md' : 'hover:bg-gray-700'}`}
              >
                Gestion de Turnos
              </button>
            </li>
            <li>
              <button
                onClick={() => setActiveTab('news')}
                className={`w-full text-left py-3 px-4 rounded-xl font-semibold transition-colors duration-200 mb-2 ${activeTab === 'news' ? 'bg-blue-600 text-white shadow-md' : 'hover:bg-gray-700'}`}
              >
                Gestion de Novedades
              </button>
            </li>
            <li>
              <button
                onClick={() => setActiveTab('other')}
                className={`w-full text-left py-3 px-4 rounded-xl font-semibold transition-colors duration-200 mb-2 ${activeTab === 'other' ? 'bg-blue-600 text-white shadow-md' : 'hover:bg-gray-700'}`}
              >
                Otros Modulos
              </button>
            </li>
          </ul>
        </nav>
        <div className="mt-auto">
          <button onClick={onLogout} className="w-full bg-red-600 text-white py-3 px-4 rounded-xl font-semibold hover:bg-red-700 transition-colors duration-200 shadow-lg">
            Cerrar Sesion
          </button>
        </div>
      </aside>

      {/* Contenido principal */}
      <main className="flex-1 overflow-y-auto p-8">
        {renderContent()}
      </main>
    </div>
  );
};

// Componente que maneja el enrutamiento y la logica principal de la aplicacion
const App = () => {
  const [user, setUser] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const navigate = useNavigate();
  const location = useLocation();

  // Funcion para obtener el perfil del usuario
  const fetchUserProfile = async () => {
    try {
      const response = await api.get('/usuarios/profile', {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });
      setUser(response.data);
      setIsLoading(false);
      if (location.pathname === '/login') {
        navigate('/');
      }
    } catch (error) {
      console.error('Error fetching user profile:', error);
      setUser(null);
      setIsLoading(false);
      localStorage.removeItem('token');
      navigate('/login');
    }
  };

  useEffect(() => {
    const token = localStorage.getItem('token');
    if (token && location.pathname !== '/login') {
      fetchUserProfile();
    } else {
      setIsLoading(false);
      if (!token && location.pathname !== '/login') {
        navigate('/login');
      }
    }
  }, [location.pathname]);

  const handleLoginSuccess = () => {
    fetchUserProfile(); // Llama a la funcion sin argumentos, ya que el interceptor maneja el token
  };

  const handleLogout = () => {
    localStorage.removeItem('token');
    setUser(null);
    navigate('/login');
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-screen">
        <p className="text-xl">Cargando...</p>
      </div>
    );
  }

  return (
    <div className="flex justify-center items-center min-h-screen bg-gray-100 p-4 relative overflow-hidden">
      <div
        className="absolute inset-0 z-0 bg-cover bg-center"
        style={{ backgroundImage: `url(https://i.ibb.co/tMJhgXxt/theme2.png)` }}
      ></div>
      <div className="relative z-10 flex justify-center items-center min-h-screen w-full">
        <Routes>
          <Route path="/login" element={<LoginForm onLoginSuccess={handleLoginSuccess} />} />
          <Route path="/" element={
            user ? (
              <Dashboard user={user} onLogout={handleLogout} />
            ) : (
              <LoginForm onLoginSuccess={handleLoginSuccess} />
            )
          } />
        </Routes>
      </div>
    </div>
  );
};

// La funcion principal se exporta envuelta en BrowserRouter
export default function AppWrapper() {
  return (
    <Router>
      <App />
    </Router>
  );
}
